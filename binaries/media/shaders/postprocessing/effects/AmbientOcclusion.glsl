vec2 HBAO_projectOnScreen(vec3 worldcoord){
    vec4 clipspace = (VPMatrix) * vec4(worldcoord, 1.0);
    vec2 sspace1 = ((clipspace.xyz / clipspace.w).xy )* 0.5 + 0.5;
    return sspace1;
}/*
vec3 samplesarray[256] = vec3[256](
vec3(0.959245, 0.2812116, 0.02773467),
vec3(0.8362429, 0.5476577, 0.02773467),
vec3(0.5715148, 0.8201229, 0.02773467),
vec3(0.3143596, 0.9488989, 0.02773467),
vec3(-0.1049408, 0.9940917, 0.02773467),
vec3(-0.5918737, 0.8055534, 0.02773467),
vec3(-0.8946261, 0.4459543, 0.02773467),
vec3(-0.97474, 0.2216139, 0.02773467),
vec3(-0.9829544, -0.1817457, 0.02773467),
vec3(-0.7686562, -0.6390607, 0.02773467),
vec3(-0.5570566, -0.8300114, 0.02773467),
vec3(-0.2109072, -0.9771127, 0.02773467),
vec3(0.09452629, -0.995136, 0.02773467),
vec3(0.6272986, -0.7782848, 0.02773467),
vec3(0.8261498, -0.5627677, 0.02773467),
vec3(0.9764093, -0.2141393, 0.02773467),
vec3(0.9529735, 0.279373, 0.1174399),
vec3(0.8307755, 0.5440771, 0.1174399),
vec3(0.5677783, 0.814761, 0.1174399),
vec3(0.3123044, 0.9426951, 0.1174399),
vec3(-0.1042547, 0.9875925, 0.1174399),
vec3(-0.5880041, 0.8002868, 0.1174399),
vec3(-0.8887771, 0.4430387, 0.1174399),
vec3(-0.9683673, 0.220165, 0.1174399),
vec3(-0.976528, -0.1805575, 0.1174399),
vec3(-0.7636308, -0.6348826, 0.1174399),
vec3(-0.5534146, -0.8245849, 0.1174399),
vec3(-0.2095283, -0.9707243, 0.1174399),
vec3(0.0939083, -0.98863, 0.1174399),
vec3(0.6231974, -0.7731965, 0.1174399),
vec3(0.8207484, -0.5590884, 0.1174399),
vec3(0.9700258, -0.2127393, 0.1174399),
vec3(0.948945, 0.278192, 0.1487033),
vec3(0.8272635, 0.5417771, 0.1487033),
vec3(0.5653782, 0.8113168, 0.1487033),
vec3(0.3109841, 0.9387099, 0.1487033),
vec3(-0.103814, 0.9834176, 0.1487033),
vec3(-0.5855184, 0.7969037, 0.1487033),
vec3(-0.8850198, 0.4411657, 0.1487033),
vec3(-0.9642737, 0.2192343, 0.1487033),
vec3(-0.9723998, -0.1797942, 0.1487033),
vec3(-0.7604026, -0.6321987, 0.1487033),
vec3(-0.5510751, -0.8210989, 0.1487033),
vec3(-0.2086425, -0.9666207, 0.1487033),
vec3(0.09351131, -0.9844506, 0.1487033),
vec3(0.6205629, -0.769928, 0.1487033),
vec3(0.8172789, -0.556725, 0.1487033),
vec3(0.965925, -0.21184, 0.1487033),
vec3(0.9331924, 0.273574, 0.2330436),
vec3(0.8135309, 0.5327836, 0.2330436),
vec3(0.5559928, 0.7978489, 0.2330436),
vec3(0.3058217, 0.9231272, 0.2330436),
vec3(-0.1020906, 0.9670927, 0.2330436),
vec3(-0.5757987, 0.7836751, 0.2330436),
vec3(-0.8703285, 0.4338424, 0.2330436),
vec3(-0.9482666, 0.215595, 0.2330436),
vec3(-0.9562579, -0.1768096, 0.2330436),
vec3(-0.7477798, -0.6217042, 0.2330436),
vec3(-0.5419272, -0.8074687, 0.2330436),
vec3(-0.205179, -0.9505748, 0.2330436),
vec3(0.09195901, -0.9681086, 0.2330436),
vec3(0.6102615, -0.7571471, 0.2330436),
vec3(0.8037119, -0.5474833, 0.2330436),
vec3(0.9498906, -0.2083234, 0.2330436),
vec3(0.9253549, 0.2712764, 0.264816),
vec3(0.8066983, 0.5283089, 0.264816),
vec3(0.5513232, 0.791148, 0.264816),
vec3(0.3032533, 0.9153742, 0.264816),
vec3(-0.1012332, 0.9589705, 0.264816),
vec3(-0.5709628, 0.7770933, 0.264816),
vec3(-0.8630189, 0.4301987, 0.264816),
vec3(-0.9403025, 0.2137843, 0.264816),
vec3(-0.9482266, -0.1753246, 0.264816),
vec3(-0.7414995, -0.6164827, 0.2648161),
vec3(-0.5373758, -0.8006871, 0.264816),
vec3(-0.2034558, -0.9425912, 0.264816),
vec3(0.09118668, -0.9599779, 0.264816),
vec3(0.6051362, -0.7507881, 0.264816),
vec3(0.7969619, -0.5428852, 0.264816),
vec3(0.9419128, -0.2065738, 0.264816),
vec3(0.9101288, 0.2668127, 0.3169804),
vec3(0.7934248, 0.519616, 0.3169805),
vec3(0.5422516, 0.7781302, 0.3169804),
vec3(0.2982635, 0.9003124, 0.3169804),
vec3(-0.09956749, 0.9431913, 0.3169804),
vec3(-0.561568, 0.7643067, 0.3169804),
vec3(-0.8488185, 0.4231201, 0.3169804),
vec3(-0.9248305, 0.2102666, 0.3169804),
vec3(-0.9326242, -0.1724398, 0.3169804),
vec3(-0.7292987, -0.606339, 0.3169805),
vec3(-0.5285337, -0.7875124, 0.3169805),
vec3(-0.2001081, -0.9270816, 0.3169805),
vec3(0.08968627, -0.9441821, 0.3169804),
vec3(0.5951791, -0.7384344, 0.3169804),
vec3(0.7838484, -0.5339524, 0.3169804),
vec3(0.9264143, -0.2031748, 0.3169804),
vec3(0.8747625, 0.2564448, 0.4111286),
vec3(0.7625933, 0.4994244, 0.4111286),
vec3(0.5211805, 0.7478932, 0.4111286),
vec3(0.2866734, 0.8653275, 0.4111286),
vec3(-0.09569844, 0.9065402, 0.4111286),
vec3(-0.5397463, 0.7346069, 0.4111286),
vec3(-0.8158347, 0.4066783, 0.4111286),
vec3(-0.8888929, 0.202096, 0.4111286),
vec3(-0.8963838, -0.165739, 0.4111286),
vec3(-0.7009591, -0.5827774, 0.4111286),
vec3(-0.5079955, -0.7569107, 0.4111286),
vec3(-0.1923322, -0.8910565, 0.4111286),
vec3(0.08620118, -0.9074925, 0.4111286),
vec3(0.5720512, -0.7097399, 0.4111286),
vec3(0.7533892, -0.5132037, 0.4111286),
vec3(0.8904151, -0.1952797, 0.4111286),
vec3(0.8431433, 0.2471753, 0.477508),
vec3(0.7350286, 0.4813722, 0.477508),
vec3(0.5023419, 0.7208598, 0.477508),
vec3(0.2763112, 0.8340493, 0.477508),
vec3(-0.09223931, 0.8737723, 0.477508),
vec3(-0.5202366, 0.7080537, 0.477508),
vec3(-0.7863455, 0.3919784, 0.477508),
vec3(-0.8567629, 0.194791, 0.477508),
vec3(-0.863983, -0.1597482, 0.477508),
vec3(-0.6756222, -0.5617123, 0.477508),
vec3(-0.4896335, -0.7295514, 0.477508),
vec3(-0.1853801, -0.8588483, 0.477508),
vec3(0.08308535, -0.8746902, 0.477508),
vec3(0.5513738, -0.6840855, 0.477508),
vec3(0.7261571, -0.4946534, 0.477508),
vec3(0.8582302, -0.1882211, 0.477508),
vec3(0.8052472, 0.2360657, 0.5439209),
vec3(0.7019919, 0.4597364, 0.543921),
vec3(0.4797635, 0.6884599, 0.5439209),
vec3(0.2638921, 0.796562, 0.5439209),
vec3(-0.08809351, 0.8344996, 0.5439209),
vec3(-0.4968539, 0.6762294, 0.5439209),
vec3(-0.7510022, 0.3743605, 0.5439209),
vec3(-0.8182548, 0.1860359, 0.543921),
vec3(-0.8251503, -0.1525681, 0.5439209),
vec3(-0.6452556, -0.5364655, 0.543921),
vec3(-0.4676264, -0.6967608, 0.5439209),
vec3(-0.177048, -0.8202463, 0.5439209),
vec3(0.07935098, -0.8353763, 0.5439209),
vec3(0.5265917, -0.6533386, 0.5439209),
vec3(0.6935191, -0.4724207, 0.5439209),
vec3(0.819656, -0.1797613, 0.5439209),
vec3(0.7561283, 0.221666, 0.6157388),
vec3(0.6591713, 0.4316931, 0.6157388),
vec3(0.4504986, 0.6464648, 0.6157388),
vec3(0.2477951, 0.7479728, 0.6157388),
vec3(-0.08271993, 0.7835963, 0.6157388),
vec3(-0.4665465, 0.6349804, 0.6157388),
vec3(-0.7051921, 0.351525, 0.6157388),
vec3(-0.7683423, 0.1746879, 0.6157388),
vec3(-0.7748173, -0.1432617, 0.6157388),
vec3(-0.6058959, -0.5037419, 0.6157388),
vec3(-0.4391018, -0.6542594, 0.6157388),
vec3(-0.1662483, -0.7702125, 0.6157388),
vec3(0.07451069, -0.7844195, 0.6157388),
vec3(0.4944704, -0.6134858, 0.6157388),
vec3(0.6512154, -0.4436037, 0.6157388),
vec3(0.7696581, -0.1687961, 0.6157388),
vec3(0.6989965, 0.2049173, 0.685137),
vec3(0.6093655, 0.3990751, 0.685137),
vec3(0.4164598, 0.5976191, 0.685137),
vec3(0.2290721, 0.6914574, 0.685137),
vec3(-0.07646976, 0.7243892, 0.685137),
vec3(-0.4312951, 0.5870024, 0.685137),
vec3(-0.6519091, 0.3249644, 0.685137),
vec3(-0.7102877, 0.1614888, 0.685137),
vec3(-0.7162735, -0.1324371, 0.685137),
vec3(-0.5601155, -0.46568, 0.685137),
vec3(-0.4059241, -0.6048247, 0.685137),
vec3(-0.1536869, -0.7120166, 0.685137),
vec3(0.06888079, -0.7251502, 0.685137),
vec3(0.4571091, -0.5671319, 0.685137),
vec3(0.6020108, -0.4100858, 0.685137),
vec3(0.7115042, -0.1560422, 0.685137),
vec3(0.651818, 0.1910865, 0.7339068),
vec3(0.5682366, 0.3721397, 0.7339068),
vec3(0.388351, 0.557283, 0.7339068),
vec3(0.213611, 0.6447877, 0.7339068),
vec3(-0.07130846, 0.6754968, 0.7339068),
vec3(-0.402185, 0.5473829, 0.7339068),
vec3(-0.6079087, 0.3030311, 0.7339068),
vec3(-0.6623471, 0.1505892, 0.7339068),
vec3(-0.6679289, -0.1234983, 0.7339068),
vec3(-0.5223107, -0.4342491, 0.7339068),
vec3(-0.3785264, -0.5640023, 0.7339068),
vec3(-0.1433138, -0.6639593, 0.7339068),
vec3(0.06423171, -0.6762064, 0.7339068),
vec3(0.4262567, -0.5288536, 0.7339068),
vec3(0.5613783, -0.3824072, 0.7339068),
vec3(0.6634814, -0.1455102, 0.7339068),
vec3(0.5743222, 0.1683679, 0.8011281),
vec3(0.5006779, 0.3278953, 0.8011281),
vec3(0.3421792, 0.4910266, 0.8011281),
vec3(0.1882144, 0.5681278, 0.8011281),
vec3(-0.06283047, 0.5951858, 0.8011281),
vec3(-0.3543685, 0.4823036, 0.8011281),
vec3(-0.5356333, 0.2670031, 0.8011281),
vec3(-0.5835995, 0.1326854, 0.8011281),
vec3(-0.5885176, -0.1088154, 0.8011281),
vec3(-0.4602123, -0.3826205, 0.8011281),
vec3(-0.3335227, -0.4969471, 0.8011281),
vec3(-0.126275, -0.58502, 0.8011281),
vec3(0.05659509, -0.595811, 0.8011281),
vec3(0.3755783, -0.4659772, 0.8011281),
vec3(0.494635, -0.3369421, 0.8011281),
vec3(0.584599, -0.1282102, 0.8011281),
vec3(0.5378134, 0.157665, 0.8281899),
vec3(0.4688506, 0.3070515, 0.8281899),
vec3(0.3204274, 0.4598128, 0.8281899),
vec3(0.1762499, 0.5320126, 0.8281899),
vec3(-0.05883643, 0.5573507, 0.8281899),
vec3(-0.3318418, 0.4516442, 0.8281899),
vec3(-0.5015839, 0.2500301, 0.8281899),
vec3(-0.5465009, 0.1242508, 0.8281899),
vec3(-0.5511064, -0.1018981, 0.8281899),
vec3(-0.4309572, -0.3582978, 0.8281899),
vec3(-0.3123212, -0.4653569, 0.8281899),
vec3(-0.1182479, -0.5478311, 0.8281899),
vec3(0.05299742, -0.5579362, 0.8281899),
vec3(0.3517033, -0.4363557, 0.8281899),
vec3(0.4631918, -0.3155232, 0.8281899),
vec3(0.5474368, -0.12006, 0.8281899),
vec3(0.3685626, 0.1080476, 0.9233024),
vec3(0.3213025, 0.2104219, 0.9233024),
vec3(0.2195884, 0.3151089, 0.9233024),
vec3(0.1207837, 0.3645874, 0.9233024),
vec3(-0.04032051, 0.3819515, 0.9233024),
vec3(-0.2274107, 0.309511, 0.9233024),
vec3(-0.3437346, 0.1713452, 0.9233024),
vec3(-0.3745162, 0.08514884, 0.9233024),
vec3(-0.3776723, -0.06983063, 0.9233024),
vec3(-0.2953343, -0.2455409, 0.9233024),
vec3(-0.2140332, -0.3189083, 0.9233024),
vec3(-0.08103508, -0.3754278, 0.9233024),
vec3(0.03631904, -0.3823527, 0.9233024),
vec3(0.2410217, -0.2990339, 0.9233024),
vec3(0.3174246, -0.2162275, 0.9233024),
vec3(0.3751575, -0.08227696, 0.9233024),
vec3(0.2854131, 0.08367149, 0.9547452),
vec3(0.2488151, 0.1629497, 0.9547452),
vec3(0.1700481, 0.2440188, 0.9547452),
vec3(0.09353433, 0.2823347, 0.9547452),
vec3(-0.031224, 0.2957813, 0.9547452),
vec3(-0.1761057, 0.2396838, 0.9547452),
vec3(-0.2661864, 0.1326889, 0.9547452),
vec3(-0.2900234, 0.06593884, 0.9547452),
vec3(-0.2924675, -0.05407649, 0.9547452),
vec3(-0.2287054, -0.1901457, 0.9547452),
vec3(-0.1657462, -0.246961, 0.9547452),
vec3(-0.06275316, -0.2907294, 0.9547452),
vec3(0.02812528, -0.296092, 0.9547452),
vec3(0.186646, -0.2315703, 0.9547452),
vec3(0.245812, -0.1674455, 0.9547452),
vec3(0.2905201, -0.06371486, 0.9547452)
);
*/
vec3 samplesarray[36] = vec3[36](
vec3(0.954709, 0.2502625, 0.1609335),
vec3(-0.3194602, 0.9338338, 0.1609334),
vec3(-0.5122241, 0.8436391, 0.1609334),
vec3(-0.4945296, -0.8541318, 0.1609335),
vec3(-0.0855888, -0.9832472, 0.1609334),
vec3(0.7075961, -0.6880468, 0.1609335),
vec3(0.915718, 0.2400416, 0.3222433),
vec3(-0.3064132, 0.8956954, 0.3222432),
vec3(-0.4913045, 0.8091843, 0.3222432),
vec3(-0.4743327, -0.8192484, 0.3222433),
vec3(-0.0820933, -0.9430907, 0.3222433),
vec3(0.6786973, -0.6599464, 0.3222433),
vec3(0.8918058, 0.2337734, 0.3873403),
vec3(-0.2984118, 0.872306, 0.3873403),
vec3(-0.4784751, 0.788054, 0.3873403),
vec3(-0.4619464, -0.7978553, 0.3873403),
vec3(-0.07994959, -0.9184637, 0.3873403),
vec3(0.6609744, -0.6427132, 0.3873403),
vec3(0.82433, 0.2160856, 0.5232469),
vec3(-0.2758334, 0.8063056, 0.5232468),
vec3(-0.4422727, 0.7284282, 0.5232468),
vec3(-0.4269946, -0.7374879, 0.5232469),
vec3(-0.07390043, -0.8489708, 0.5232468),
vec3(0.6109638, -0.5940842, 0.5232469),
vec3(0.6882147, 0.1804051, 0.7027194),
vec3(-0.2302871, 0.6731666, 0.7027194),
vec3(-0.3692436, 0.6081485, 0.7027194),
vec3(-0.3564883, -0.6157122, 0.7027194),
vec3(-0.06169783, -0.7087868, 0.7027194),
vec3(0.51008, -0.4959877, 0.7027194),
vec3(0.3064693, 0.08033628, 0.9484844),
vec3(-0.1025493, 0.2997682, 0.9484844),
vec3(-0.1644281, 0.270815, 0.9484844),
vec3(-0.158748, -0.2741832, 0.9484844),
vec3(-0.0274747, -0.3156303, 0.9484844),
vec3(0.227144, -0.2208685, 0.9484844)
);

float AmbientOcclusionSingle(
    vec3 position,
    vec3 normal,
    float roughness,
    float hemisphereSize
){
    //normal = normalize(cross(
    //  dFdx(position),
    //  dFdy(position)
    //));
    vec3 posc = ToCameraSpace(position);
    vec3 tangent = normalize(cross(normal, vec3(0,1,1)));
    
    mat3 TBN = mat3(
        tangent,
        cross(normal, tangent),
        normal
    );
    
    float buf = 0.0;
    vec3 dir = normalize(reflect(posc, normal));
    float ringsize = min(length(posc), hemisphereSize);
	
	//float dpc = texture(depthTex, UV).r;
	
    roughness = 1.0 - roughness;
    float trrough = (roughness * roughness) * 0.7;
    float rot = rand2s(UV) * PI * 2;
    mat2 RM = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));
    const float[] rings = float[](0.05, 0.15, 0.25, 0.33, 0.5, 1.0);
    for(int g = 0; g < samplesarray.length(); ++g)
    {
        vec3 smpl = samplesarray[g];
        smpl.xy = RM * smpl.xy;
        vec3 displace = normalize(mix(TBN * smpl, dir, trrough)) * ringsize;
        
        vec2 gauss = HBAO_projectOnScreen(position + displace);
        // values 0.0, 0.25, 0.50, 0.75, 1.0
		float mangl = 0;
        for(int m = 0;m < rings.length(); ++m){
            vec3 pos = reconstructCameraSpace(mix(UV, gauss, rings[m]), 0);
			
            float dt = max(0, dot(normal, normalize(pos - posc)));
			float rg = ringsize * rings[m] * 3;
			float fact = smoothstep(1.0, 0.0, max(0, distance(pos, posc) / rg - 0.5));
            mangl = max(dt, mangl) * fact;
        }
		buf += mangl;
    }
    return clamp(1.0 - (buf/(samplesarray.length())), 0.0, 1.0);
}

float AmbientOcclusion(
    vec3 position,
    vec3 normal,
    float roughness
){
    float ao = 0;//AmbientOcclusionSingle(position, normal, roughness, 0.1);
    ao = AmbientOcclusionSingle(position, normal, roughness, 0.2);
    return ao;
}
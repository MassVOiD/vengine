vec2 HBAO_projectOnScreen(vec3 worldcoord){
    vec4 clipspace = (VPMatrix) * vec4(worldcoord, 1.0);
    vec2 sspace1 = ((clipspace.xyz / clipspace.w).xy )* 0.5 + 0.5;
    return sspace1;
}
vec3 samplesarray[256] = vec3[256](
vec3(0.959245, 0.2812116, 0.02773467),
vec3(0.8362429, 0.5476577, 0.02773467),
vec3(0.5715148, 0.8201229, 0.02773467),
vec3(0.3143596, 0.9488989, 0.02773467),
vec3(-0.1049408, 0.9940917, 0.02773467),
vec3(-0.5918737, 0.8055534, 0.02773467),
vec3(-0.8946261, 0.4459543, 0.02773467),
vec3(-0.97474, 0.2216139, 0.02773467),
vec3(-0.9829544, -0.1817457, 0.02773467),
vec3(-0.7686562, -0.6390607, 0.02773467),
vec3(-0.5570566, -0.8300114, 0.02773467),
vec3(-0.2109072, -0.9771127, 0.02773467),
vec3(0.09452629, -0.995136, 0.02773467),
vec3(0.6272986, -0.7782848, 0.02773467),
vec3(0.8261498, -0.5627677, 0.02773467),
vec3(0.9764093, -0.2141393, 0.02773467),
vec3(0.9529735, 0.279373, 0.1174399),
vec3(0.8307755, 0.5440771, 0.1174399),
vec3(0.5677783, 0.814761, 0.1174399),
vec3(0.3123044, 0.9426951, 0.1174399),
vec3(-0.1042547, 0.9875925, 0.1174399),
vec3(-0.5880041, 0.8002868, 0.1174399),
vec3(-0.8887771, 0.4430387, 0.1174399),
vec3(-0.9683673, 0.220165, 0.1174399),
vec3(-0.976528, -0.1805575, 0.1174399),
vec3(-0.7636308, -0.6348826, 0.1174399),
vec3(-0.5534146, -0.8245849, 0.1174399),
vec3(-0.2095283, -0.9707243, 0.1174399),
vec3(0.0939083, -0.98863, 0.1174399),
vec3(0.6231974, -0.7731965, 0.1174399),
vec3(0.8207484, -0.5590884, 0.1174399),
vec3(0.9700258, -0.2127393, 0.1174399),
vec3(0.948945, 0.278192, 0.1487033),
vec3(0.8272635, 0.5417771, 0.1487033),
vec3(0.5653782, 0.8113168, 0.1487033),
vec3(0.3109841, 0.9387099, 0.1487033),
vec3(-0.103814, 0.9834176, 0.1487033),
vec3(-0.5855184, 0.7969037, 0.1487033),
vec3(-0.8850198, 0.4411657, 0.1487033),
vec3(-0.9642737, 0.2192343, 0.1487033),
vec3(-0.9723998, -0.1797942, 0.1487033),
vec3(-0.7604026, -0.6321987, 0.1487033),
vec3(-0.5510751, -0.8210989, 0.1487033),
vec3(-0.2086425, -0.9666207, 0.1487033),
vec3(0.09351131, -0.9844506, 0.1487033),
vec3(0.6205629, -0.769928, 0.1487033),
vec3(0.8172789, -0.556725, 0.1487033),
vec3(0.965925, -0.21184, 0.1487033),
vec3(0.9331924, 0.273574, 0.2330436),
vec3(0.8135309, 0.5327836, 0.2330436),
vec3(0.5559928, 0.7978489, 0.2330436),
vec3(0.3058217, 0.9231272, 0.2330436),
vec3(-0.1020906, 0.9670927, 0.2330436),
vec3(-0.5757987, 0.7836751, 0.2330436),
vec3(-0.8703285, 0.4338424, 0.2330436),
vec3(-0.9482666, 0.215595, 0.2330436),
vec3(-0.9562579, -0.1768096, 0.2330436),
vec3(-0.7477798, -0.6217042, 0.2330436),
vec3(-0.5419272, -0.8074687, 0.2330436),
vec3(-0.205179, -0.9505748, 0.2330436),
vec3(0.09195901, -0.9681086, 0.2330436),
vec3(0.6102615, -0.7571471, 0.2330436),
vec3(0.8037119, -0.5474833, 0.2330436),
vec3(0.9498906, -0.2083234, 0.2330436),
vec3(0.9253549, 0.2712764, 0.264816),
vec3(0.8066983, 0.5283089, 0.264816),
vec3(0.5513232, 0.791148, 0.264816),
vec3(0.3032533, 0.9153742, 0.264816),
vec3(-0.1012332, 0.9589705, 0.264816),
vec3(-0.5709628, 0.7770933, 0.264816),
vec3(-0.8630189, 0.4301987, 0.264816),
vec3(-0.9403025, 0.2137843, 0.264816),
vec3(-0.9482266, -0.1753246, 0.264816),
vec3(-0.7414995, -0.6164827, 0.2648161),
vec3(-0.5373758, -0.8006871, 0.264816),
vec3(-0.2034558, -0.9425912, 0.264816),
vec3(0.09118668, -0.9599779, 0.264816),
vec3(0.6051362, -0.7507881, 0.264816),
vec3(0.7969619, -0.5428852, 0.264816),
vec3(0.9419128, -0.2065738, 0.264816),
vec3(0.9101288, 0.2668127, 0.3169804),
vec3(0.7934248, 0.519616, 0.3169805),
vec3(0.5422516, 0.7781302, 0.3169804),
vec3(0.2982635, 0.9003124, 0.3169804),
vec3(-0.09956749, 0.9431913, 0.3169804),
vec3(-0.561568, 0.7643067, 0.3169804),
vec3(-0.8488185, 0.4231201, 0.3169804),
vec3(-0.9248305, 0.2102666, 0.3169804),
vec3(-0.9326242, -0.1724398, 0.3169804),
vec3(-0.7292987, -0.606339, 0.3169805),
vec3(-0.5285337, -0.7875124, 0.3169805),
vec3(-0.2001081, -0.9270816, 0.3169805),
vec3(0.08968627, -0.9441821, 0.3169804),
vec3(0.5951791, -0.7384344, 0.3169804),
vec3(0.7838484, -0.5339524, 0.3169804),
vec3(0.9264143, -0.2031748, 0.3169804),
vec3(0.8747625, 0.2564448, 0.4111286),
vec3(0.7625933, 0.4994244, 0.4111286),
vec3(0.5211805, 0.7478932, 0.4111286),
vec3(0.2866734, 0.8653275, 0.4111286),
vec3(-0.09569844, 0.9065402, 0.4111286),
vec3(-0.5397463, 0.7346069, 0.4111286),
vec3(-0.8158347, 0.4066783, 0.4111286),
vec3(-0.8888929, 0.202096, 0.4111286),
vec3(-0.8963838, -0.165739, 0.4111286),
vec3(-0.7009591, -0.5827774, 0.4111286),
vec3(-0.5079955, -0.7569107, 0.4111286),
vec3(-0.1923322, -0.8910565, 0.4111286),
vec3(0.08620118, -0.9074925, 0.4111286),
vec3(0.5720512, -0.7097399, 0.4111286),
vec3(0.7533892, -0.5132037, 0.4111286),
vec3(0.8904151, -0.1952797, 0.4111286),
vec3(0.8431433, 0.2471753, 0.477508),
vec3(0.7350286, 0.4813722, 0.477508),
vec3(0.5023419, 0.7208598, 0.477508),
vec3(0.2763112, 0.8340493, 0.477508),
vec3(-0.09223931, 0.8737723, 0.477508),
vec3(-0.5202366, 0.7080537, 0.477508),
vec3(-0.7863455, 0.3919784, 0.477508),
vec3(-0.8567629, 0.194791, 0.477508),
vec3(-0.863983, -0.1597482, 0.477508),
vec3(-0.6756222, -0.5617123, 0.477508),
vec3(-0.4896335, -0.7295514, 0.477508),
vec3(-0.1853801, -0.8588483, 0.477508),
vec3(0.08308535, -0.8746902, 0.477508),
vec3(0.5513738, -0.6840855, 0.477508),
vec3(0.7261571, -0.4946534, 0.477508),
vec3(0.8582302, -0.1882211, 0.477508),
vec3(0.8052472, 0.2360657, 0.5439209),
vec3(0.7019919, 0.4597364, 0.543921),
vec3(0.4797635, 0.6884599, 0.5439209),
vec3(0.2638921, 0.796562, 0.5439209),
vec3(-0.08809351, 0.8344996, 0.5439209),
vec3(-0.4968539, 0.6762294, 0.5439209),
vec3(-0.7510022, 0.3743605, 0.5439209),
vec3(-0.8182548, 0.1860359, 0.543921),
vec3(-0.8251503, -0.1525681, 0.5439209),
vec3(-0.6452556, -0.5364655, 0.543921),
vec3(-0.4676264, -0.6967608, 0.5439209),
vec3(-0.177048, -0.8202463, 0.5439209),
vec3(0.07935098, -0.8353763, 0.5439209),
vec3(0.5265917, -0.6533386, 0.5439209),
vec3(0.6935191, -0.4724207, 0.5439209),
vec3(0.819656, -0.1797613, 0.5439209),
vec3(0.7561283, 0.221666, 0.6157388),
vec3(0.6591713, 0.4316931, 0.6157388),
vec3(0.4504986, 0.6464648, 0.6157388),
vec3(0.2477951, 0.7479728, 0.6157388),
vec3(-0.08271993, 0.7835963, 0.6157388),
vec3(-0.4665465, 0.6349804, 0.6157388),
vec3(-0.7051921, 0.351525, 0.6157388),
vec3(-0.7683423, 0.1746879, 0.6157388),
vec3(-0.7748173, -0.1432617, 0.6157388),
vec3(-0.6058959, -0.5037419, 0.6157388),
vec3(-0.4391018, -0.6542594, 0.6157388),
vec3(-0.1662483, -0.7702125, 0.6157388),
vec3(0.07451069, -0.7844195, 0.6157388),
vec3(0.4944704, -0.6134858, 0.6157388),
vec3(0.6512154, -0.4436037, 0.6157388),
vec3(0.7696581, -0.1687961, 0.6157388),
vec3(0.6989965, 0.2049173, 0.685137),
vec3(0.6093655, 0.3990751, 0.685137),
vec3(0.4164598, 0.5976191, 0.685137),
vec3(0.2290721, 0.6914574, 0.685137),
vec3(-0.07646976, 0.7243892, 0.685137),
vec3(-0.4312951, 0.5870024, 0.685137),
vec3(-0.6519091, 0.3249644, 0.685137),
vec3(-0.7102877, 0.1614888, 0.685137),
vec3(-0.7162735, -0.1324371, 0.685137),
vec3(-0.5601155, -0.46568, 0.685137),
vec3(-0.4059241, -0.6048247, 0.685137),
vec3(-0.1536869, -0.7120166, 0.685137),
vec3(0.06888079, -0.7251502, 0.685137),
vec3(0.4571091, -0.5671319, 0.685137),
vec3(0.6020108, -0.4100858, 0.685137),
vec3(0.7115042, -0.1560422, 0.685137),
vec3(0.651818, 0.1910865, 0.7339068),
vec3(0.5682366, 0.3721397, 0.7339068),
vec3(0.388351, 0.557283, 0.7339068),
vec3(0.213611, 0.6447877, 0.7339068),
vec3(-0.07130846, 0.6754968, 0.7339068),
vec3(-0.402185, 0.5473829, 0.7339068),
vec3(-0.6079087, 0.3030311, 0.7339068),
vec3(-0.6623471, 0.1505892, 0.7339068),
vec3(-0.6679289, -0.1234983, 0.7339068),
vec3(-0.5223107, -0.4342491, 0.7339068),
vec3(-0.3785264, -0.5640023, 0.7339068),
vec3(-0.1433138, -0.6639593, 0.7339068),
vec3(0.06423171, -0.6762064, 0.7339068),
vec3(0.4262567, -0.5288536, 0.7339068),
vec3(0.5613783, -0.3824072, 0.7339068),
vec3(0.6634814, -0.1455102, 0.7339068),
vec3(0.5743222, 0.1683679, 0.8011281),
vec3(0.5006779, 0.3278953, 0.8011281),
vec3(0.3421792, 0.4910266, 0.8011281),
vec3(0.1882144, 0.5681278, 0.8011281),
vec3(-0.06283047, 0.5951858, 0.8011281),
vec3(-0.3543685, 0.4823036, 0.8011281),
vec3(-0.5356333, 0.2670031, 0.8011281),
vec3(-0.5835995, 0.1326854, 0.8011281),
vec3(-0.5885176, -0.1088154, 0.8011281),
vec3(-0.4602123, -0.3826205, 0.8011281),
vec3(-0.3335227, -0.4969471, 0.8011281),
vec3(-0.126275, -0.58502, 0.8011281),
vec3(0.05659509, -0.595811, 0.8011281),
vec3(0.3755783, -0.4659772, 0.8011281),
vec3(0.494635, -0.3369421, 0.8011281),
vec3(0.584599, -0.1282102, 0.8011281),
vec3(0.5378134, 0.157665, 0.8281899),
vec3(0.4688506, 0.3070515, 0.8281899),
vec3(0.3204274, 0.4598128, 0.8281899),
vec3(0.1762499, 0.5320126, 0.8281899),
vec3(-0.05883643, 0.5573507, 0.8281899),
vec3(-0.3318418, 0.4516442, 0.8281899),
vec3(-0.5015839, 0.2500301, 0.8281899),
vec3(-0.5465009, 0.1242508, 0.8281899),
vec3(-0.5511064, -0.1018981, 0.8281899),
vec3(-0.4309572, -0.3582978, 0.8281899),
vec3(-0.3123212, -0.4653569, 0.8281899),
vec3(-0.1182479, -0.5478311, 0.8281899),
vec3(0.05299742, -0.5579362, 0.8281899),
vec3(0.3517033, -0.4363557, 0.8281899),
vec3(0.4631918, -0.3155232, 0.8281899),
vec3(0.5474368, -0.12006, 0.8281899),
vec3(0.3685626, 0.1080476, 0.9233024),
vec3(0.3213025, 0.2104219, 0.9233024),
vec3(0.2195884, 0.3151089, 0.9233024),
vec3(0.1207837, 0.3645874, 0.9233024),
vec3(-0.04032051, 0.3819515, 0.9233024),
vec3(-0.2274107, 0.309511, 0.9233024),
vec3(-0.3437346, 0.1713452, 0.9233024),
vec3(-0.3745162, 0.08514884, 0.9233024),
vec3(-0.3776723, -0.06983063, 0.9233024),
vec3(-0.2953343, -0.2455409, 0.9233024),
vec3(-0.2140332, -0.3189083, 0.9233024),
vec3(-0.08103508, -0.3754278, 0.9233024),
vec3(0.03631904, -0.3823527, 0.9233024),
vec3(0.2410217, -0.2990339, 0.9233024),
vec3(0.3174246, -0.2162275, 0.9233024),
vec3(0.3751575, -0.08227696, 0.9233024),
vec3(0.2854131, 0.08367149, 0.9547452),
vec3(0.2488151, 0.1629497, 0.9547452),
vec3(0.1700481, 0.2440188, 0.9547452),
vec3(0.09353433, 0.2823347, 0.9547452),
vec3(-0.031224, 0.2957813, 0.9547452),
vec3(-0.1761057, 0.2396838, 0.9547452),
vec3(-0.2661864, 0.1326889, 0.9547452),
vec3(-0.2900234, 0.06593884, 0.9547452),
vec3(-0.2924675, -0.05407649, 0.9547452),
vec3(-0.2287054, -0.1901457, 0.9547452),
vec3(-0.1657462, -0.246961, 0.9547452),
vec3(-0.06275316, -0.2907294, 0.9547452),
vec3(0.02812528, -0.296092, 0.9547452),
vec3(0.186646, -0.2315703, 0.9547452),
vec3(0.245812, -0.1674455, 0.9547452),
vec3(0.2905201, -0.06371486, 0.9547452)
);
/*
vec3 samplesarray[36] = vec3[36](
vec3(0.954709, 0.2502625, 0.1609335),
vec3(-0.3194602, 0.9338338, 0.1609334),
vec3(-0.5122241, 0.8436391, 0.1609334),
vec3(-0.4945296, -0.8541318, 0.1609335),
vec3(-0.0855888, -0.9832472, 0.1609334),
vec3(0.7075961, -0.6880468, 0.1609335),
vec3(0.915718, 0.2400416, 0.3222433),
vec3(-0.3064132, 0.8956954, 0.3222432),
vec3(-0.4913045, 0.8091843, 0.3222432),
vec3(-0.4743327, -0.8192484, 0.3222433),
vec3(-0.0820933, -0.9430907, 0.3222433),
vec3(0.6786973, -0.6599464, 0.3222433),
vec3(0.8918058, 0.2337734, 0.3873403),
vec3(-0.2984118, 0.872306, 0.3873403),
vec3(-0.4784751, 0.788054, 0.3873403),
vec3(-0.4619464, -0.7978553, 0.3873403),
vec3(-0.07994959, -0.9184637, 0.3873403),
vec3(0.6609744, -0.6427132, 0.3873403),
vec3(0.82433, 0.2160856, 0.5232469),
vec3(-0.2758334, 0.8063056, 0.5232468),
vec3(-0.4422727, 0.7284282, 0.5232468),
vec3(-0.4269946, -0.7374879, 0.5232469),
vec3(-0.07390043, -0.8489708, 0.5232468),
vec3(0.6109638, -0.5940842, 0.5232469),
vec3(0.6882147, 0.1804051, 0.7027194),
vec3(-0.2302871, 0.6731666, 0.7027194),
vec3(-0.3692436, 0.6081485, 0.7027194),
vec3(-0.3564883, -0.6157122, 0.7027194),
vec3(-0.06169783, -0.7087868, 0.7027194),
vec3(0.51008, -0.4959877, 0.7027194),
vec3(0.3064693, 0.08033628, 0.9484844),
vec3(-0.1025493, 0.2997682, 0.9484844),
vec3(-0.1644281, 0.270815, 0.9484844),
vec3(-0.158748, -0.2741832, 0.9484844),
vec3(-0.0274747, -0.3156303, 0.9484844),
vec3(0.227144, -0.2208685, 0.9484844)
);
*/
float AmbientOcclusionSingle(
    vec3 position,
    vec3 normal,
    float roughness,
    float hemisphereSize
){
    //normal = normalize(cross(
    //  dFdx(position),
    //  dFdy(position)
    //));
    vec3 posc = ToCameraSpace(position);
    vec3 tangent = normalize(cross(normal, vec3(0,1,1)));
    
    mat3 TBN = mat3(
        tangent,
        cross(normal, tangent),
        normal
    );
    
    float buf = 0.0;
    vec3 dir = normalize(reflect(posc, normal));
    float ringsize = min(length(posc), hemisphereSize);
    
    //float dpc = texture(depthTex, UV).r;
    
    roughness = 1.0 - roughness;
    float trrough = (roughness * roughness);
    float rot = rand2s(UV) * PI * 2;
    mat2 RM = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));
    const float[] rings = float[](0.25, 0.5, 1.0);
    for(int g = 0; g < samplesarray.length(); ++g)
    {
        vec3 smpl = samplesarray[g];
        smpl.xy = RM * smpl.xy;
        vec3 displace = normalize(mix(TBN * smpl, dir, trrough)) * ringsize;
        
        vec2 gauss = HBAO_projectOnScreen(position + displace);
        // values 0.0, 0.25, 0.50, 0.75, 1.0
        float mangl = 0;
        for(int m = 0;m < rings.length(); ++m){
            vec2 mx = mix(UV, gauss, rings[m]);
            if(mx.x < 0 || mx.x > 1 || mx.y < 0 || mx.y > 1) break;
            vec3 pos = reconstructCameraSpace(mx, 0);
            
            float dt = max(0, dot(normal, normalize(pos - posc)) - 0.2);
            float rg = ringsize * rings[m] * 3;
            float fact = smoothstep(1.0, 0.0, max(0, distance(pos, posc) / rg - 0.5));
            mangl = max(dt, mangl) * fact;
        }
        buf += mangl;
    }
    return clamp(1.0 - (buf/(samplesarray.length())), 0.0, 1.0);
}


float AmbientOcclusionSingleNoProject(
    vec3 position,
    vec3 normal,
    float roughness,
    float hemisphereSize
){
    vec3 posc = ToCameraSpace(position);
    vec3 tangent = normalize(cross(normal, vec3(0,1,1)));
    
    mat3 TBN = mat3(
        tangent,
        cross(normal, tangent),
        normal
    );
    
    float buf = 0.0;
    vec3 dir = normalize(reflect(posc, normal));
    float ringsize = 1.0 / length(posc);
    
    float dpc = length(posc);
    
    roughness = 1.0 - roughness;
    float trrough = (roughness * roughness);
    float rot = rand2s(UV) * PI * 2;
    mat2 RM = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));
    const float[] rings = float[](0.11, 1.0);
    vec2 normproj = normalize(HBAO_projectOnScreen(position + normal*0.01) - UV);
    for(int g = 0; g < samplesarray.length(); ++g)
    {
        vec3 smpl = samplesarray[g];
        smpl.xy = RM * smpl.xy;
        vec3 displace = normalize(mix(TBN * smpl, dir, trrough)) * ringsize;
        smpl.xy *= sign(dot(smpl.xy, normproj));
        //smpl.xy = mix(smpl.xy, normproj, trrough);
        vec2 gauss = UV + smpl.xy * ringsize * 0.09;
        // values 0.0, 0.25, 0.50, 0.75, 1.0
        float mangl = 0;
        for(int m = 0;m < rings.length(); ++m){
            vec2 mx = mix(UV, gauss, rings[m]);
            if(mx.x < 0 || mx.x > 1 || mx.y < 0 || mx.y > 1) break;
            float lent = textureMSAA(normalsTex, mx, 0).a;
            float d = max(0, dpc - lent);
            float distdim = 1.0 - smoothstep(0.0, 0.5, d);
            buf += min(d, 0.6) * distdim;
        }
    }
    float val = clamp(1.0 - (buf/(samplesarray.length() * rings.length())), 0.0, 1.0);
    return pow(val, 12.0);
}
vec2 projdir(vec3 start, vec3 end)
{
    vec4 clipspace = (VPMatrix) * vec4((start), 1.0);
    vec2 sspace1 = ((clipspace.xyz / clipspace.w).xy + 1.0) / 2.0;
    clipspace = (VPMatrix) * vec4((end), 1.0);
    vec2 sspace2 = ((clipspace.xyz / clipspace.w).xy + 1.0) / 2.0;
    return (sspace2 - sspace1);
}
float testVisibility3d(vec2 cuv, vec3 w1, vec3 w2) 
{
    float d3d1 = distance(CameraPosition, w1);
    float d3d2 = distance(CameraPosition, w2);
    vec2 sdir = projdir((w1), (w2));
    float minang = 1;
    for(float ix=0;ix<1.0;ix+= 0.33) 
    { 
        float i = ix*ix*ix;
        vec2 ruv = mix(cuv, cuv + sdir, i);
        if(ruv.x < 0 || ruv.x > 1 || ruv.y < 0 || ruv.y > 1) return minang;
        float rd3d = textureMSAA(normalsTex, ruv, 0).a + 0.001;
        if(rd3d < mix(d3d1, d3d2, i) && rd3d > mix(d3d1, d3d2, i) - 1.01 ) 
        {
            minang = 0;
        }
    }
    return minang;
}

vec3 random3d(float seed){
    return vec3(
        rand2s(UV + seed),
        rand2s(UV - seed),
        rand2s(UV + seed + 12.0)
    ) * 2 - 1;
}
vec2 xsamples[] = vec2[](
vec2(0.009011431, 0.09457164),
vec2(0.03588319, 0.1865808),
vec2(0.08012987, 0.2735036),
vec2(0.1409498, 0.3528925),
vec2(0.2172358, 0.422414),
vec2(0.3075902, 0.4798836),
vec2(0.4103443, 0.5232996),
vec2(0.5235803, 0.5508754),
vec2(0.6451581, 0.5610668),
vec2(0.7727448, 0.5525989),
vec2(0.03761707, 0.08723506),
vec2(0.09144463, 0.1665469),
vec2(0.1602457, 0.2356826),
vec2(0.2425058, 0.2925593),
vec2(0.3364545, 0.3352959),
vec2(0.4400912, 0.3622426),
vec2(0.5512127, 0.3720074),
vec2(0.6674456, 0.3634782),
vec2(0.7862788, 0.3358431),
vec2(0.9051006, 0.2886051),
vec2(0.06258768, 0.07146875),
vec2(0.1381696, 0.1304192),
vec2(0.2248766, 0.1750872),
vec2(0.3206278, 0.2039553),
vec2(0.4231609, 0.2157773),
vec2(0.5300651, 0.2095973),
vec2(0.6388161, 0.1847671),
vec2(0.7468139, 0.1409573),
vec2(0.8514194, 0.07816622),
vec2(0.9499944, -0.00327723),
vec2(0.08151028, 0.04879625),
vec2(0.1715428, 0.08168877),
vec2(0.2677771, 0.09757254),
vec2(0.3677669, 0.09564264),
vec2(0.4689762, 0.07540761),
vec2(0.5688174, 0.03669818),
vec2(0.6646892, -0.0203276),
vec2(0.7540158, -0.09518456),
vec2(0.8342854, -0.1870641),
vec2(0.9030879, -0.2948429),
vec2(0.09255636, 0.02140844),
vec2(0.1883395, 0.02506454),
vec2(0.2848017, 0.01062928),
vec2(0.3793677, -0.02191219),
vec2(0.4694732, -0.07224894),
vec2(0.5526036, -0.1397472),
vec2(0.6263317, -0.2234581),
vec2(0.6883554, -0.3221287),
vec2(0.7365322, -0.4342181),
vec2(0.7689138, -0.5579172),
vec2(0.09465848, -0.008048125),
vec2(0.1869365, -0.03398174),
vec2(0.2743052, -0.07734115),
vec2(0.3543093, -0.1373496),
vec2(0.4246039, -0.2129238),
vec2(0.4829903, -0.3026886),
vec2(0.5274503, -0.4049953),
vec2(0.5561774, -0.5179446),
vec2(0.5676062, -0.6394124),
vec2(0.5604377, -0.7670786),
vec2(0.08761352, -0.03672697),
vec2(0.1674693, -0.08974428),
vec2(0.2373019, -0.1578379),
vec2(0.2950131, -0.2395146),
vec2(0.338704, -0.3330234),
vec2(0.3667045, -0.4363804),
vec2(0.3776, -0.5473967),
vec2(0.3702547, -0.6637104),
vec2(0.3438309, -0.7828189),
vec2(0.297805, -0.9021155),
vec2(0.07210226, -0.06185681),
vec2(0.1318191, -0.1368346),
vec2(0.1773675, -0.2230824),
vec2(0.207209, -0.3185348),
vec2(0.2200743, -0.4209421),
vec2(0.2149831, -0.5279036),
vec2(0.1912613, -0.6369019),
vec2(0.1485533, -0.7453401),
vec2(0.08683044, -0.8505795),
vec2(0.006394804, -0.9499785),
vec2(0.04962357, -0.08100927),
vec2(0.08343099, -0.1707023),
vec2(0.1002937, -0.2667699),
vec2(0.09938195, -0.3667741),
vec2(0.08017833, -0.4681842),
vec2(0.04248739, -0.5684143),
vec2(-0.01355944, -0.6648617),
vec2(-0.08750311, -0.7549458),
vec2(-0.1785607, -0.8361466),
vec2(-0.2856334, -0.9060429),
vec2(0.02234963, -0.0923336),
vec2(0.02698069, -0.1880746),
vec2(0.01352821, -0.2846787),
vec2(-0.01804882, -0.3795711),
vec2(-0.06746549, -0.4701844),
vec2(-0.134114, -0.5539976),
vec2(-0.2170699, -0.6285743),
vec2(-0.3151039, -0.6915992),
vec2(-0.426697, -0.7409148),
vec2(-0.5500601, -0.7745541),
vec2(-0.007084003, -0.0947355),
vec2(-0.03207681, -0.1872727),
vec2(-0.07454451, -0.2750784),
vec2(-0.1337353, -0.3556893),
vec2(-0.20859, -0.4267496),
vec2(-0.2977556, -0.4860469),
vec2(-0.3996044, -0.5315461),
vec2(-0.5122554, -0.5614217),
vec2(-0.6336006, -0.5740865),
vec2(-0.7613332, -0.5682181),
vec2(-0.03583309, -0.08798289),
vec2(-0.08803466, -0.1683743),
vec2(-0.1554138, -0.2388965),
vec2(-0.2364988, -0.2974362),
vec2(-0.3295579, -0.3420769),
vec2(-0.4326245, -0.3711281),
vec2(-0.5435241, -0.3831534),
vec2(-0.6599066, -0.3769925),
vec2(-0.7792777, -0.3517829),
vec2(-0.8990367, -0.3069741),
vec2(-0.06111954, -0.07272827),
vec2(-0.1354855, -0.1332054),
vec2(-0.2212651, -0.1796295),
vec2(-0.3164087, -0.2104413),
vec2(-0.4186798, -0.2243484),
vec2(-0.5256876, -0.2203465),
vec2(-0.6349217, -0.1977355),
vec2(-0.7437891, -0.1561338),
vec2(-0.8496514, -0.09548577),
vec2(-0.9498642, -0.01606606),
vec2(-0.08049984, -0.05044575),
vec2(-0.169844, -0.08516456),
vec2(-0.265735, -0.1030045),
vec2(-0.3657433, -0.1031108),
vec2(-0.4673436, -0.08494069),
vec2(-0.5679523, -0.04827199),
vec2(-0.6649653, 0.006789881),
vec2(-0.7557976, 0.0798124),
vec2(-0.8379211, 0.1700387),
vec2(-0.9089038, 0.2763945),
vec2(-0.09210127, -0.02328855),
vec2(-0.1877901, -0.0288941),
vec2(-0.2845263, -0.01642592),
vec2(-0.3797352, 0.01418343),
vec2(-0.4708469, 0.06267501),
vec2(-0.5553344, 0.1284669),
vec2(-0.6307517, 0.2106591),
vec2(-0.6947714, 0.3080465),
vec2(-0.7452206, 0.4191316),
vec2(-0.7801142, 0.5421457),
vec2(-0.09480272, 0.006119081),
vec2(-0.1875896, 0.03016846),
vec2(-0.2758231, 0.07173992),
vec2(-0.3570324, 0.1301071),
vec2(-0.4288512, 0.2042343),
vec2(-0.4890532, 0.2927917),
vec2(-0.5355871, 0.3941718),
vec2(-0.5666082, 0.5065128),
vec2(-0.5805076, 0.6277228),
vec2(-0.5759399, 0.7555087),
vec2(-0.08834317, 0.03493541),
vec2(-0.1692619, 0.08631578),
vec2(-0.2404665, 0.1529734),
vec2(-0.2998287, 0.2334582),
vec2(-0.3454146, 0.3260579),
vec2(-0.3755136, 0.4288234),
vec2(-0.3886675, 0.5395948),
vec2(-0.3836918, 0.656034),
vec2(-0.3596989, 0.7756557),
vec2(-0.3161118, 0.8958646),
vec2(-0.07334682, 0.06037585),
vec2(-0.134578, 0.1341222),
vec2(-0.1818731, 0.2194246),
vec2(-0.2136519, 0.3142497),
vec2(-0.2285998, 0.4163738),
vec2(-0.2256874, 0.5234168),
vec2(-0.20419, 0.6328755),
vec2(-0.163699, 0.7421607),
vec2(-0.1041316, 0.8486352),
vec2(-0.02573633, 0.9496514),
vec2(-0.05126279, 0.07998203),
vec2(-0.08688951, 0.1689681),
vec2(-0.1057049, 0.2646724),
vec2(-0.1068294, 0.3646744),
vec2(-0.0896948, 0.4664545),
vec2(-0.0540524, 0.5674313),
vec2(1.882498E-05, 0.665),
vec2(0.07211307, 0.756571),
vec2(0.1614982, 0.839609),
vec2(0.2671252, 0.9116711),
vec2(-0.02422512, 0.09185936),
vec2(-0.03080469, 0.1874862),
vec2(-0.01932213, 0.2843443),
vec2(0.01031622, 0.3798599),
vec2(0.05787758, 0.4714607),
vec2(0.1228058, 0.5566136),
vec2(0.2042258, 0.6328639),
vec2(0.300956, 0.6978721),
vec2(0.411522, 0.7494496),
vec2(0.5341747, 0.7855937),
vec2(0.005153478, 0.09486011),
vec2(0.02825686, 0.1878871),
vec2(0.06892776, 0.2765393),
vec2(0.126465, 0.3583387),
vec2(0.1998571, 0.4309085),
vec2(0.2877969, 0.492009),
vec2(0.388698, 0.5395728),
vec2(0.5007175, 0.5717359),
vec2(0.6217795, 0.5868691),
vec2(0.749605, 0.583603)
);
float GetAveragedDistance(vec2 uv){
    float outc = 0.0;
    float counter = 0.001;
    float xaon =distance(CameraPosition, Input.WorldPos);
    float factor = 1.0 / xaon;
    vec2 multiplier = vec2(ratio, 1) * 0.5 * factor;
    for(int g=0;g < xsamples.length();g++){
        float aon = texture(aoTex, uv + xsamples[g] * multiplier).r;
        float weight = 1.0 - smoothstep(0.0, 0.9, (xaon - aon));
        outc += aon * weight;
        counter += 1.0 * weight;
    
    }
    return 1.0 - max(0, xaon - (outc / counter));
}

float someVeryWierdSSAO(
    vec3 position,
    vec3 normal,
    float roughness,
    float hemisphereSize
){
    float a;
    a += GetAveragedDistance(UV);
    return pow(a, 18);
}

float testVisibility2d(vec2 uv1, vec2 uv2, float dist1, float dist2) 
{
    float minang = 1;
    for(float ix=0;ix<1.0;ix+= 0.33) 
    { 
        float i = ix;
        vec2 ruv = mix(uv1, uv2, i);
        float rd3d = texture(aoTex, ruv).r + 0.01;
        if(rd3d < mix(dist1, dist2, i) && rd3d > mix(dist1, dist2, i) - 1.01 ) 
        {
            minang -= 0.33;
        }
    }
    return minang;
}

float weirdness(
    vec3 position,
    vec3 normal,
    float roughness,
    float hemisphereSize
){
    float outc = 0.0;
    float counter = 0.001;
    float xaon =distance(CameraPosition, Input.WorldPos);
    float factor = 1.0 / xaon;
    vec2 multiplier = vec2(ratio, 1) * 0.2 * factor;
	vec3 posc = ToCameraSpace(position);
    for(int g=0;g < xsamples.length();g+=2){
		vec2 asdf = xsamples[g] * multiplier;
		vec2 nuv = UV + asdf;
        float aon = texture(aoTex, nuv).r;
		vec3 dir = normalize((FrustumConeLeftBottom + FrustumConeBottomLeftToBottomRight * nuv.x + FrustumConeBottomLeftToTopLeft * nuv.y));
		vec3 dupa = dir * aon;
        float dt = max(0, dot(normal, normalize(dupa - posc)) - 0.1);
		float fact = smoothstep(1.0, 0.0, max(0, distance(dupa, posc) - 0.3));
		outc += dt * fact;
		counter += 1.0;
    
    }
    return pow(1.0 - max(0, (outc / counter)), 6);
}

float VDAO(
    vec3 position,
    vec3 normal,
    float roughness,
    float hemisphereSize
){
    vec3 posc = ToCameraSpace(position);
    vec3 tangent = normalize(cross(normal, vec3(0,1,0)));
    
    mat3 TBN = mat3(
        tangent,
        cross(normal, tangent),
        normal
    );
    
    float buf = 0.0;
    vec3 dir = normalize(reflect(posc, normal));
    float ringsize = min(length(posc), hemisphereSize);
    
    //float dpc = texture(depthTex, UV).r;
    
    roughness = 1.0 - roughness;
    float trrough = (roughness * roughness);
    float rot = rand2s(UV) * PI * 2;
    mat2 RM = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));
    const float[] rings = float[](0.25, 0.5, 1.0);
    float weight = 0;
    for(int g = 0; g < 42; ++g)
    {
        vec3 smpl = TBN * random3d(float(g));
        smpl *= sign(dot(smpl, normal));
        vec3 displace = mix(dir, normalize(smpl), 1) * ringsize;
        float dotdiffuse = max(0, dot(normalize(displace),  (normal)));
        // concept of sample importance:
        // 
        
        buf += testVisibility3d(UV, position, position + displace) * dotdiffuse;
        weight += dotdiffuse;
    }
    return (0.8) * clamp(buf/weight, 0.0, 1.0);
}


float AmbientOcclusion(
    vec3 position,
    vec3 normal,
    float roughness
){
    float ao = 0;//AmbientOcclusionSingle(position, normal, roughness, 0.1);
    ao = weirdness(position, normal, roughness, 0.7);
    return ao;
}